[
  {
    "title": "2018: Year in Review",
    "slug": "2018-year-in-review",
    "status": "published",
    "publishDate": "2019-01-05T09:00:00.000Z",
    "metaDescription": "2018 year in review",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Another exciting year has started. I’d like to take a moment to reflect on everything that happened in 2018 as it was an exciting year for me, both career-wise and personally."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This is my first blog post, like my first ever blog post. So take it easy on me."
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Career",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "I started developing a keen interest in front-end nuances and decided to look for opportunities where I could nourish and improve my front-end skills. I quit my old job and landed a Frontend focussed role in an amazing company. Every day I see myself becoming a better dev than the previous day."
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Talks and Meetups",
              "bold": true
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "I attended a meetup on Frontend Frameworks war - by Facebook Developer Circle, Chennai."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Along with 5 other folks I gave a talk on “Virtual and Augmented Reality” and “Pillars of Web - HTML, CSS and JS” to undergrad students."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Achievements Unlocked",
              "bold": true
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Bagged first place in a hackathon"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Completed hacktoberfest and kick-started my open-source contributions. (Can’t wait to receive my hacktoberfest goodies)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Took part in Codevember (first timer here). I got to see a lot of codepen inspirations and I’m totally into it now."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Created a few CSS illustrations, mostly inspired by dribbble shots. Here’s my handle for the curious - "
                    },
                    {
                      "type": "link",
                      "href": "https://codepen.io/ruphaa/",
                      "children": [
                        {
                          "text": "https://codepen.io/ruphaa/"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Health and Fitness",
              "bold": true
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Started working out and I hit the gym 5 times a week now."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Took up 30 days yoga challenge and completed it successfully. Yoga magically gives you a sense of inner peace, boosts up your confidence and improves your focus."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Bummers",
              "bold": true
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "I took up the "
                    },
                    {
                      "text": "#100DaysOfCode",
                      "code": true
                    },
                    {
                      "text": " challenge but somewhere down the line I got side-tracked."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "I started Codevember challenge with all fury but ended up not completing it."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Planned to build a portfolio but didn’t make much progress in that."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Lessons Learnt",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Setbacks are inevitable. But what we learn from it is what’s important. I set a lot of luxurious goals but didn’t plan and manage my time accordingly. So I’m gonna try and focus on"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Setting realistic goals"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Focussing on one thing at a time"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "What’s in store for 2019",
              "bold": true
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Write more blog posts."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Build a portfolio"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Listen to 3 podcasts every week"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Read 1 blog post every day"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Create 1 codepen every week"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Complete at least 1 round of "
                    },
                    {
                      "text": "#100DaysOfCode",
                      "code": true
                    },
                    {
                      "text": " and log it"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Read 10 books"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "2018 was really a fantastic year for me. Started the year low but looking back, I am grateful for everything. Not yet over, I am so grateful to have a wonderful mentor @flexdinesh, for all the career guidance and motivation that set me on the right track."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Have an amazing year ahead!"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "divider",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "Everything about Event Handlers and Event Propagation",
    "slug": "everything-about-event-handlers-and-event-propagation",
    "status": "published",
    "publishDate": "2022-09-03T04:00:00.000Z",
    "metaDescription": "Event Handling and Event Propagation in JavaScript",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This has been written over a hundred times before and probably holds more than a hundred answers on StackOverflow. But over time, going through different articles and answers, I curated the important parts and wrote them down in this post."
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Event Handling"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "There are 3 ways to attach a handler to an event in JavaScript."
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "HTML Attribute"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "DOM Property"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "addEventListener()"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "HTML attribute"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This is the old-school way of attaching a handler to an event by adding an attribute to the DOM element."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Remember, a node can only have one onclick attribute. So with this approach, only one handler can be registered for an event.",
              "italic": true
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "<div id=\"el\" onclick=\"kaboom()\"></div>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "DOM property"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This is the "
            },
            {
              "text": "JavaScripty",
              "italic": true
            },
            {
              "text": " way of creating a DOM node on the fly, adding an attribute to it and attaching a handler to the attribute. Since this is almost the same as the previous approach, "
            },
            {
              "text": "only one handler can be registered to an event",
              "italic": true
            },
            {
              "text": "."
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "<script>\n  el = document.querySelector(\"#el\")\n  el.onclick = clickMe();\n</script>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "addEventListener() 🔥"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This is the modern way of binding handlers to the event. We can bind any number of handlers with the event and all these handlers will be invoked when that event happens."
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "<script>\n  el.addEventListener(\"click\", (e) => {\n\t// Some code here that goes KABOOM!\n  });\n</script>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Event Behaviours"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "preventDefault()"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Event Bubbling"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Event Capturing"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "preventDefault()"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "There are a handful or pre-defined events that have default actions associated with them. For example,"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "a link by default takes you to the link’s target."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "if you press the down arrow, the page scrolls down."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "In these cases, the "
            },
            {
              "text": "custom handlers associated with these elements will get invoked before the default actions",
              "bold": true
            },
            {
              "text": " are followed by the default actions. If you want to completely unbind this default behavior from the element, you can call the "
            },
            {
              "text": "event.preventDefault()",
              "code": true
            },
            {
              "text": " in your handler."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Note: This has got nothing to stop the event from bubbling up the DOM.",
              "italic": true
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Event Bubbling & Event Capturing"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Events in DOM usually get propagated as a stack of events nested in the web browser."
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Event Bubbling"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Event bubbling can be better explained with an example."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Let's take a nested DOM structure like this"
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "<div id=\"parent\">\n  <div id=\"child\"></div>\n</div>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "If there are handlers attached to both "
            },
            {
              "text": "#parent",
              "code": true
            },
            {
              "text": " and "
            },
            {
              "text": "#child",
              "code": true
            },
            {
              "text": " divs,"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "when the child is clicked, due to the bubbling nature of events, first the handler for the "
                    },
                    {
                      "text": "#child",
                      "code": true
                    },
                    {
                      "text": " div is invoked and then the event propagates to "
                    },
                    {
                      "text": "#parent",
                      "code": true
                    },
                    {
                      "text": " div and its handler will be invoked."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "In short, "
            },
            {
              "text": "the child first and the parent next",
              "bold": true
            },
            {
              "text": " as events bubble from "
            },
            {
              "text": "the bottom to top",
              "bold": true
            },
            {
              "text": "."
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Event Capturing"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Event capturing is more of capturing the event in the DOM and handing it over to event handlers for execution. Events are captured from the top-down, meaning the outermost element is captured first and propagated to the inner elements. Once the events are captured, the bubbling of events starts from the innermost elements."
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "stopPropagation()"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "You can stop the bubbling of events from child to parent by calling "
            },
            {
              "text": "event.stopPropagation()",
              "code": true
            },
            {
              "text": " in the child event handler."
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "function childHandler(event) {\n  event.stopPropagation();\n}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Removing an event listener"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "You can remove an event listener from an element by invoking "
            },
            {
              "text": "removeEventListener()",
              "code": true
            },
            {
              "text": " on the event, which accepts the event name and handler name as arguments."
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "function handleClick(e) {\n  // go KABOOM!\n}\n\nelement.addEventListener(\"click\", handleClick);\nelement.removeEventListener(\"click\", handleClick);"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "blockquote",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Note: Do not use the anonymous handler method. You should define the function outside the callback and then reference it in back in the removeEventListener callback.",
                  "italic": true
                }
              ]
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "// this is wrong as you cannot remove this event listener\nelement.addEventListener(\"click\", () => { /* go KABOOM! */ });"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "That's it, folks. Pl drop a comment if you think this post could be improved in any way."
            }
          ]
        }
      ]
    }
  },
  {
    "title": "14 tips to Google like a pro",
    "slug": "14-tips-to-google-like-a-pro-14",
    "status": "published",
    "publishDate": "2022-09-09T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9350nmpkofqgrqikpqx5.png",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "hero",
          "props": {
            "imageSrc": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9350nmpkofqgrqikpqx5.png",
            "caption": {
              "discriminant": false,
              "value": null
            }
          },
          "children": [
            {
              "type": "component-inline-prop",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Google is one of the most powerful tools, and believe it or not, Googling is one of the most important skills out there. Here are some handy tips to master it."
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #1: Search for an exact word or phrase"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Use "
            },
            {
              "text": "quotes",
              "code": true
            },
            {
              "text": " to search for an exact word or phrase."
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "\"what is kubernetes\""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-23 at 4.39.30 pm.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634967599216/E0irWd1ar.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #2: Excluding a word"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "The minus sign allows you to specify words that shouldn’t appear in your results. Use "
            },
            {
              "text": "-",
              "code": true
            },
            {
              "text": " to exclude words."
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "hover over an element -css"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-22 at 12.02.05 pm.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634864533073/5UTRGZNFT.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #3: Site search"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "The site: operator allows you to perform a search within the specified site."
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "site:geeksforgeeks.org merge sort"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-23 at 12.06.34 am.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634908006159/UntPc3sumn.png)\n"
            },
            {
              "text": "Keep a Domain Out of Search:",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Tired of seeing Wikipedia articles on your search results?\nUse "
            },
            {
              "text": "-site:wikipedia.org",
              "code": true
            },
            {
              "text": " before your search term to remove results from that site."
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #4: Asterisk(*)"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "The asterisk is a wildcard that can match any word. Use "
            },
            {
              "text": "*",
              "code": true
            },
            {
              "text": " for missing words or phrases."
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "build a todo app with *"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #5: File type"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "The "
            },
            {
              "text": "filetype:",
              "code": true
            },
            {
              "text": " operator allows you to search for files specific to a type.\nSome available types: "
            },
            {
              "text": "pdf, ppt, doc, xls",
              "code": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "filetype:pdf how to learn react"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-22 at 11.58.09 am.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634864295404/JQbC76Tml.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #6: Word definitions"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Use the following search trick to find an inline definition:"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "define:machine learning"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-22 at 11.50.32 pm.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634907038686/mJMMkxlpf.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #7: Use "
            },
            {
              "text": "~",
              "code": true
            },
            {
              "text": " to search for a word and all its synonyms"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "How to increase font-size of paragraph ~tag"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #8: Use "
            },
            {
              "text": "OR",
              "code": true
            },
            {
              "text": " to perform multiple searches"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "how to code in C# OR how to program in C#"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #9: Related"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Use "
            },
            {
              "text": "related",
              "code": true
            },
            {
              "text": " to finding sites that are similar to the specified site."
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "related: udemy.com"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-22 at 11.54.39 pm.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634907286761/RwDNG0nsA.png)\n"
            },
            {
              "text": "Search for a cached website:",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "cache:epictutorials.com"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #10: Number range"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Use "
            },
            {
              "text": "...",
              "code": true
            },
            {
              "text": " to search within a range of numbers"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "Updated css course 2020...2021"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-23 at 12.05.01 am.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634907907846/n_ad-uiXp.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #11: Time range"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "javascript after:2021"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "javascript before:2019"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #12: "
            },
            {
              "text": "+",
              "code": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Using "
            },
            {
              "text": "+",
              "code": true
            },
            {
              "text": " will return pages that contain both words"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "JavaScript Oops+React"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-23 at 12.12.12 am.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634908341520/YVXGLXH9-.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #13: AND"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Use to get results that must contain some given words."
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "React AND CSS"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-23 at 12.13.24 am.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634908411342/U0Hcb0a39.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Tip #14: All words In text"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "If you want to find a web page that includes every word of your search query, you can put "
            },
            {
              "text": "allintext:",
              "code": true
            },
            {
              "text": " followed by the words and/or phrases you want to search."
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "allintext: CSS fundamentals like the box model, cascade and specificity"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-23 at 12.14.49 am.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634908496270/YYV5r9nmD.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Bonus tips"
            }
          ]
        },
        {
          "type": "heading",
          "level": 4,
          "children": [
            {
              "text": "Translations"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "You can use Google search to translate words and phrases from one language to another."
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "translate perfect to Italian"
            }
          ]
        },
        {
          "type": "heading",
          "level": 4,
          "children": [
            {
              "text": "Timer"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "You can pull up a timer within Google by typing an amount of time followed by the word timer."
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "5 min timer"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-22 at 11.33.39 am.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634862824554/5qd2W3sY3.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 4,
          "children": [
            {
              "text": "Stopwatch"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "You can also pull up a stopwatch within Google simply by typing stopwatch.\n![Screen Shot 2021-10-22 at 11.31.48 am.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634862715545/IakPCmBSO.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Further reference:"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://ahrefs.com/blog/google-advanced-search-operators/",
              "children": [
                {
                  "text": "Google Search Operators: The Complete List (42 Advanced Operators)"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://markodenic.com/use-google-like-a-pro/",
              "children": [
                {
                  "text": "Use Google like a pro"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://www.google.com/advanced_search",
              "children": [
                {
                  "text": "Google's Advanced search"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "divider",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Thanks for reading, hope you all enjoyed this post. Stay tuned for more tips and tricks 🥳"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Stay safe and stay happy!"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![](https://media.giphy.com/media/l0IpWdz5FIJCEJO6I/giphy.gif)"
            }
          ]
        }
      ]
    }
  },
  {
    "title": "An Evergreen Guide to Hacktoberfest",
    "slug": "an-evergreen-guide-to-hacktoberfest",
    "status": "published",
    "publishDate": "2019-09-30T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "hero",
          "props": {
            "imageSrc": "https://res.cloudinary.com/practicaldev/image/fetch/s--3bEqys1Q--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34v8tslmn4egrpoglxxy.png",
            "caption": {
              "discriminant": false,
              "value": null
            }
          },
          "children": [
            {
              "type": "component-inline-prop",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Hacktoberfest is a month-long worldwide open-source festival, run by DigitalOcean and open to everyone in our global community. Anybody can participate in Hacktoberfest, not necessarily have any experience or knowledge in coding. Let's dive more into it."
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "What is Hacktoberfest?"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "An open source community event in October."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "People gather to learn and share new skills by contributing to and supporting open source projects."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Participants get to win cool swags like t-shirts and stickers."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "An open source project is where anybody can contribute to it through any means regardless of their connection to the project owners or the project itself."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "blockquote",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "The main aim of Hacktoberfest is to encourage people to contribute to open source projects."
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Prerequisites:"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Basic knowledge of Git and GitHub since the contributions for Hacktoberfest takes place through it."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Learn Git and GitHub in no time with these resources:"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": ""
                    },
                    {
                      "type": "link",
                      "href": "https://www.youtube.com/watch?v=RGOj5yH7evk",
                      "children": [
                        {
                          "text": "Git and GitHub for Beginners - Crash Course"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": ""
                    },
                    {
                      "type": "link",
                      "href": "https://www.youtube.com/watch?v=8JJ101D3knE",
                      "children": [
                        {
                          "text": "Git Tutorial for Beginners: Learn Git in 1 Hour"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": ""
                    },
                    {
                      "type": "link",
                      "href": "https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github",
                      "children": [
                        {
                          "text": "Kent C Dodds' - How to Contribute to an Open Source Project on GitHub"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": ""
                    },
                    {
                      "type": "link",
                      "href": "https://guides.github.com/activities/hello-world/",
                      "children": [
                        {
                          "text": "Github Guide"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "How to get started?"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Step 1: Register for Hacktoberfest",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Go to the official "
            },
            {
              "type": "link",
              "href": "https://hacktoberfest.digitalocean.com/register",
              "children": [
                {
                  "text": "Hacktoberfest"
                }
              ]
            },
            {
              "text": " website and register yourself with Github or Gitlab."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Step 2: Find repositories for contributions",
              "bold": true
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Repositories with "
                    },
                    {
                      "text": "Hacktoberfest",
                      "code": true
                    },
                    {
                      "text": " label will only be taken into consideration/or counted in as contributions."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Screen Shot 2021-10-17 at 10.31.52 am.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634472676133/5N8q7DmAP.png)"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "You can find good projects worth contributing on the GitHub page by typing "
                    },
                    {
                      "text": "label:hacktoberfest",
                      "code": true
                    },
                    {
                      "text": " "
                    },
                    {
                      "text": "is:issue",
                      "code": true
                    },
                    {
                      "text": " "
                    },
                    {
                      "text": "is:open",
                      "code": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Some good places to find projects:"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": ""
                    },
                    {
                      "type": "link",
                      "href": "https://hacktosearch.vercel.app/",
                      "children": [
                        {
                          "text": "Hacktoberfest Search"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": ""
                    },
                    {
                      "type": "link",
                      "href": "https://hacktoberfest-projects.vercel.app/",
                      "children": [
                        {
                          "text": "Hacktoberfest Projects"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": ""
                    },
                    {
                      "type": "link",
                      "href": "https://goodfirstissue.dev/",
                      "children": [
                        {
                          "text": "Good First Issue"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Step 3: Make 4 Hacktoberfest Pull Requests",
              "bold": true
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Make at least 4 PRs by October 31 in any of the Github-hosted repos."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Find the list of hacktoberfest opt-in projects "
                    },
                    {
                      "type": "link",
                      "href": "https://github.com/topics/hacktoberfest",
                      "children": [
                        {
                          "text": "here"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Your PR will be counted if they are in the repo with "
                    },
                    {
                      "text": "hacktoberfest",
                      "code": true
                    },
                    {
                      "text": " label and once merged, approved by a maintainer or labeled with "
                    },
                    {
                      "text": "hacktoberfest-accepted",
                      "code": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Step 4: Check and see whether you’ve qualified",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Once you’ve signed up for Hacktoberfest, you can check your progress on the "
            },
            {
              "type": "link",
              "href": "https://hacktoberfest.digitalocean.com/profile",
              "children": [
                {
                  "text": "Hacktoberfest website"
                }
              ]
            },
            {
              "text": "."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Step 5: Earn cool prizes",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "By participating in Hacktoberfest, you'll gain more open source experience and get the chance to earn some Hacktoberfest swags like t-shirts and yes, they'll be internationally delivered for free."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "In Hacktoberfest 2021, DigitalOcean is offering an alternative to their traditional t-shirt prize: a "
            },
            {
              "text": "plant-a-tree",
              "bold": true
            },
            {
              "text": " alternative! While those Hacktoberfest t-shirts are amazing, it always feels good to save the planet."
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "FAQs"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "1) What if my pull requests aren't accepted?",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Even if your pull requests aren’t accepted, as long as you open at least 4 pull requests, you’ll earn the shirt.\nThe only exception would be if the project maintainer chooses to mark your pull request as “invalid”. They may do this if they perceive your pull request to be low effort, or if it contains plagiarism."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "2) What kinds of pull requests count toward earning the Hacktoberfest shirt?",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Any pull request made to a public repo on GitHub will count. The pull request must contain commits you personally made yourself — not automated commits from bots."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "4) What if I don’t make at least 4 pull requests by midnight October 31?",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "As long as you're registered for Hacktoberfest, you’ll still get free stickers in the mail. It’s still worth registering, even if you’re too busy to participate."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "8 open source projects to contribute to Hacktoberfest:",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://github.com/api-platform/api-platform",
              "children": [
                {
                  "text": "API Platform"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://github.com/chartjs/Chart.js",
              "children": [
                {
                  "text": "Chart.js"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://github.com/freeCodeCamp/freeCodeCamp",
              "children": [
                {
                  "text": "FreeCodeCamp"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://github.com/EbookFoundation/free-programming-books",
              "children": [
                {
                  "text": "Free programming books"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://github.com/florinpop17/app-ideas",
              "children": [
                {
                  "text": "App Ideas"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://github.com/facebook/docusaurus",
              "children": [
                {
                  "text": "Docusaurus"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://github.com/szabgab/awesome-for-non-programmers",
              "children": [
                {
                  "text": "Awesome for non-programmers"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://github.com/MunGell/awesome-for-beginners",
              "children": [
                {
                  "text": "Awesome First PR Opportunities"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Further Reference:"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 @kentcdodds - "
            },
            {
              "type": "link",
              "href": "https://kentcdodds.com/blog/first-timers-only",
              "children": [
                {
                  "text": "First Timers Only"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 Ayushi Rawat's "
            },
            {
              "type": "link",
              "href": "https://ayushirawat.com/beginners-guide-to-hacktoberfest-2021",
              "children": [
                {
                  "text": "Beginner's guide to Hacktoberfest 2021"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 Catalin Pit's "
            },
            {
              "type": "link",
              "href": "https://catalins.tech/find-open-source-projects-to-contribute-as-a-beginner",
              "children": [
                {
                  "text": "Find Open Source Projects To Contribute As A Beginner"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 @atapas "
            },
            {
              "type": "link",
              "href": "https://twitter.com/tapasadhikary/status/1435590663035310086",
              "children": [
                {
                  "text": "8 resources to get you started with open source"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://dev.to/5t3ph/a-hacktoberfest-project-for-all-web-developers-style-stage-5h2m",
              "children": [
                {
                  "text": "A Hacktoberfest Project For All Web Developers: Style Stage"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://dev.to/devteam/hacktoberfest-2021-is-here-4a3l",
              "children": [
                {
                  "text": "Hacktoberfest 2021 is Here"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://dev.to/miguendes/hacktoberfest-69-beginner-friendly-projects-you-can-contribute-to-2clc",
              "children": [
                {
                  "text": "Hacktoberfest: 69 Beginner-Friendly Projects You Can Contribute To"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://h.daily-dev-tips.com/8-non-technical-ways-to-contribute-to-open-source",
              "children": [
                {
                  "text": "8 Non-technical ways to contribute to open-source"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://github.blog/2021-10-07-githubs-guide-hacktoberfest-2021/",
              "children": [
                {
                  "text": "GitHub’s guide to Hacktoberfest 2021"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "That's it for today, folks!"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Hopefully, I was able to provide useful information about Hacktoberfest. Happy hacking 👩‍💻👨‍💻"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Thank you all for reading 🥳  Stay safe and happy!"
            }
          ]
        }
      ]
    }
  },
  {
    "title": "5 ways to center a div vertically and horizontally using CSS",
    "slug": "5-ways-to-center-a-div-vertically-and-horizontally-using-css",
    "status": "published",
    "publishDate": "2021-08-31T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "component-block",
          "component": "hero",
          "props": {
            "imageSrc": "https://dev-to-uploads.s3.amazonaws.com/i/w6g6lk4ysz6cy3bv9cg2.png",
            "caption": {
              "discriminant": false,
              "value": null
            }
          },
          "children": [
            {
              "type": "component-inline-prop",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Every developer should have come across this task of centering a div in their lifetime at least once or every single day. We all have our handy technique but for beginners, it might be frustrating at times.\n \nIn this article, I have compiled a list of different CSS tricks to center a div horizontally and vertically center on a page, choose a trick or two, and make it your favorite."
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Method 1: Using Flex",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "I wanted this technique to be on top since it's my favorite of all. In this trick, all the CSS properties are defined under the parent container."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "We define the parent with "
            },
            {
              "text": "display: flex",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " property along with "
            },
            {
              "text": "justify-content",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": "(horizontal placement by default) and "
            },
            {
              "text": "align-items",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": "(vertical placement by default) center. These properties come with Flex specifications. One glitch to make this work is by providing a fixed width and height to the parent."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/d1yboppbijfik58nm8ax.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Method 2: Using Grid",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Using CSS Grid, we can achieve our goal in two ways. First, using "
            },
            {
              "text": "'place-items'",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " properties and second is by using "
            },
            {
              "text": "align and justify self",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": ". Yet again, these properties are exclusive to CSS Grid."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "a) Using "
            },
            {
              "text": "place-items",
              "italic": true,
              "bold": true
            },
            {
              "text": ", we provide the rules to the parent, and it alone does the magic. We give the parent "
            },
            {
              "text": "display: grid",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " and "
            },
            {
              "text": "place-items: center",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " and there you go, things get super centered."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/pdg93ejwzoese5dpwu4d.png)"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "b) Using "
            },
            {
              "text": "justify and align-self",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": ", we provide the parent container with "
            },
            {
              "text": "display: grid",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " ",
              "italic": true,
              "bold": true
            },
            {
              "text": "property, and the main properties are given to the child container - "
            },
            {
              "text": "align-self",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": "(vertically placement) and "
            },
            {
              "text": "justify-self",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": "(horizontal placement) props are given center as value."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/uerf3tkkj37j7hsvllt6.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Method 3: Using CSS Positioning and CSS transform",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This is one of the old school methods we follow to center elements on a page. We make the child container's position "
            },
            {
              "text": "absolute",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " to the parent container and move the child container to 50% from the top and left of the parent."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/18f9nnunoe6iwxu1boa0.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Method 4: Using CSS Margin",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Yet another old school method works like a charm in all the browsers. All we have to do is define "
            },
            {
              "text": "margin: 0 auto",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " style to the child container. I've personally faced some inconsistencies while trying this method, so I always add extra properties to center the elements."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/cnvo7unu19clnn3b55nx.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Method 5: Using CSS Positioning",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This is one of the common methods followed since the birth of "
            },
            {
              "text": "'CSS Positioning'",
              "italic": true,
              "bold": true
            },
            {
              "text": ". We make the child container "
            },
            {
              "text": "absolute",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " to the parent and define top, left, right, and bottom properties '0' along with "
            },
            {
              "text": "margin: auto",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": "."
            }
          ]
        },
        {
          "type": "blockquote",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Note: CSS Inset - It's a shorthand for top, left, right and bottom property(currently this property is supported in Firefox only)"
                }
              ]
            }
          ]
        },
        {
          "type": "blockquote",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "inset:  2px 3px 4px 5px /* top right bottom left */"
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![](https://dev-to-uploads.s3.amazonaws.com/i/90ohfgy77bha7b7bzwbd.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Bonus Method: Using CSS Table",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "I know we all use the "
            },
            {
              "text": "'CSS table'",
              "italic": true,
              "bold": true
            },
            {
              "text": " widely across our application, which comes with plenty of table properties. I was surprised to find that we can use table property to center the content and elements in a container and it gets better we can do that in two ways."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "We have to provide "
            },
            {
              "text": "display: table",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " to the wrapper(which is a level above the parent), then we use "
            },
            {
              "text": "display: table-cell",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": " property in the parent."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "The difference in two ways comes with child properties - one, is by using "
            },
            {
              "text": "'margin'",
              "italic": true,
              "bold": true
            },
            {
              "text": " property and the other using "
            },
            {
              "text": "display: inline-block",
              "italic": true,
              "bold": true,
              "code": true
            },
            {
              "text": "."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/ml1ei0nxos3tydyf4hig.png)"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/k6b71bct2q5acxti0x4q.png)"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "We have reached the end of this article. I have attached a Codepen below, where you can find all of the above-mentioned tricks in one place, play around with it and share over here if you follow any cool tricks to center things."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "{% codepen "
            },
            {
              "type": "link",
              "href": "https://codepen.io/ruphaa/pen/vYNwBoG",
              "children": [
                {
                  "text": "https://codepen.io/ruphaa/pen/vYNwBoG"
                }
              ]
            },
            {
              "text": " default-tab=css,result %}"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "I hope you find this article helpful and informative. If you like this article, give me a thumbs up 👍 Don't forget to bookmark it for future reference 🔖"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Thanks for reading 🤓"
            }
          ]
        }
      ]
    }
  },
  {
    "title": "Stop Waiting and Start Writing ✍🏻",
    "slug": "stop-waiting-and-start-writing",
    "status": "published",
    "publishDate": "2021-05-31T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "hero",
          "props": {
            "imageSrc": "https://dev-to-uploads.s3.amazonaws.com/i/c7ot7bxxur6q6mtncp6g.jpg",
            "caption": {
              "discriminant": false,
              "value": null
            }
          },
          "children": [
            {
              "type": "component-inline-prop",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "My blogging has been quite infrequent. I used to publish a post once a year. That's it. That's not the whole, I list down around 100 ideas every year, which never come out in any form. This year, I took a resolution to break this jinx. I will be turning all my tech notes, tips, and tricks I learn every day into blog posts."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This place will be the curation of my learnings and I can get back to it anytime when I want to have a glance at the topics."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Recently, I found this interesting article "
            },
            {
              "type": "link",
              "href": "https://www.swyx.io/writing/learn-in-public-hack/",
              "children": [
                {
                  "text": "'Learning in Public'"
                }
              ]
            },
            {
              "text": " written by "
            },
            {
              "type": "link",
              "href": "https://twitter.com/swyx",
              "children": [
                {
                  "text": "Shawn"
                }
              ]
            },
            {
              "text": ". This one post was enough to shun away my fears in writing down my thoughts. I also found "
            },
            {
              "type": "link",
              "href": "https://twitter.com/flaviocopes",
              "children": [
                {
                  "text": "Flavio"
                }
              ]
            },
            {
              "text": "'s "
            },
            {
              "type": "link",
              "href": "https://www.freecodecamp.org/news/every-developer-should-have-a-blog-heres-why-and-how-to-stick-with-it-5fd55a247fbf/",
              "children": [
                {
                  "text": "blog post"
                }
              ]
            },
            {
              "text": " motivating to start my blogging journey."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "I have still got the rest of the year in front of me to enrich my writing experience. I will be consistently blogging and will be sharing my upcoming posts every week. "
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "I'm figuring out the ways to start my blogging journey actively, there are 50–50 chances of me either getting successful or dropping off the blogging midway. Either way, let's face it, three things are not gonna change - Consistent writing, planning the ideas up front, and building up a writing routine."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "I'm gonna list down the upcoming posts that I've been writing and will be coming out soon. Some posts might be teeny tiny ones and some might be bigger than dumbledore's beard, but I will try my best to not bore the audience."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Upcoming Blog Posts:"
            }
          ]
        },
        {
          "type": "ordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "5 ways to center a div element in a container"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "5 Productivity Apps  every Software Engineers should use"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "5 chrome extensions useful for every developer"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "7 tips I follow to write a blog post"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "How to create a Google Search Page in Neuomorphic design"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "CSS Function() -  Everything to know about linear-gradient"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "5 tips to become a pro in searching on Google"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "How to create a responsive image using min() and max() function"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "HTML tips and tricks - Part 1 "
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Advanced Javascript Concepts - Part 1 (Notes on Andrei Neagoie's Udemy Course)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Hopefully, I stay consistent in my writing journey. Thanks for reading! 😀"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Follow me for more interesting articles. If you like this post, give me a thumbs up 🙌"
            }
          ]
        }
      ]
    }
  },
  {
    "title": "CSS Subgrid — Level 2 of CSS Grid",
    "slug": "css-subgrid-level-2-of-css-grid",
    "status": "published",
    "publishDate": "2021-03-31T13:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "hero",
          "props": {
            "imageSrc": "https://thepracticaldev.s3.amazonaws.com/i/k7bu3vqcyt3y2u226pdk.png",
            "caption": {
              "discriminant": false,
              "value": null
            }
          },
          "children": [
            {
              "type": "component-inline-prop",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Something amazing is about to happen to grid layouts. The level 2 specification of CSS grid, called ",
              "italic": true
            },
            {
              "text": "CSS Subgrid",
              "italic": true,
              "bold": true
            },
            {
              "text": ", is coming to browsers soon and it's gonna take the already awesome CSS Grid to a whole new level.",
              "italic": true
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "What's all the fuss about?"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Recently, I came across "
            },
            {
              "type": "link",
              "href": "https://twitter.com/rachelandrew",
              "children": [
                {
                  "text": "Rachel Andrew"
                }
              ]
            },
            {
              "text": "'s article where she introduced CSS Subgrid and I got super excited and thrilled about the possibilities that come along with CSS Subgrid."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "In short — CSS Subgrid makes is possible to construct nested grids within CSS Grid."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Right now (without subgrid) the tracks of the nested grids have no relationship to the tracks on the parent grid. To put it in simple terms — we have a parent container with "
            },
            {
              "text": "display: grid",
              "code": true
            },
            {
              "text": " property, therefore its children become grid items. These grid items can also be made the grid containers. But "
            },
            {
              "text": "the grid tracks defined for the parent grid container won't be aligned with the grid tracks of the child grid containers since they both are independent of the layout",
              "bold": true
            },
            {
              "text": " of its content. In some cases, "
            },
            {
              "text": "it is necessary for the content and layout of multiple grid items to align with each other.",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "With CSS Subgrid, "
            },
            {
              "text": "a grid container can inherit the definition of its rows and columns from its parent grid container",
              "bold": true
            },
            {
              "text": ", by making the grid item a subgrid. Subgrid provides the ability to pass the properties of the grid to its nested elements and content-based sizing information back to the parent grid."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "These are the two main wins of CSS Subgrid —"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "A subgrid can use the grid tracks defined on the parent - for rows, columns or both."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "A subgrid will also inherit the gaps from the parent. The sizing of the items in the subgrid can change the size of the parent tracks."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Here's an example of how nested grid works without subgrid —"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "{% codepen "
            },
            {
              "type": "link",
              "href": "https://codepen.io/ruphaa/pen/gyzPBY",
              "children": [
                {
                  "text": "https://codepen.io/ruphaa/pen/gyzPBY"
                }
              ]
            },
            {
              "text": " %}"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "But what if we wanted the tracks of nested grid items to be aligned with the tracks of the parent grid?"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This is where subgrid comes to the rescue. When we add the property "
            },
            {
              "text": "grid-template-rows: subgrid",
              "code": true
            },
            {
              "text": " to the nested grid items, they inherit the row property of the parent grid and align with each other automatically."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This is how it should look if the property is applied."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "![CSS Subgrid](https://i.ibb.co/2Pr78Mk/Screen-Shot-2019-04-20-at-7-30-26-PM.png)"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Note: Currently, there is no browser support for subgrid so I have created an illustration to explain the behavior.",
              "italic": true
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Subgrid for the columns and rows"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "In this case, subgrid will be on both columns and rows. This means that both dimensions are aligned to the tracks of the parent grid.\n![Subgrid-Column-Row](https://i.ibb.co/4WnLP9N/subgrid-row-column.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Subgrid for columns only"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "In this case, subgrid is used on columns, meaning there will be an implicit track for rows alone in the grid item but its column tracks are aligned with the parent grid.\n![Subgrid-Column](https://i.ibb.co/6BnvdcG/subgrid-column.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Subgrid for rows only"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "In this case, subgrid is applied on rows, which aligns with the row tracks of the parent grid, but its column sizing is independent of the parent grid.\n![Subgrid-Row](https://i.ibb.co/crDPjkh/subgrid-row.png)"
            }
          ]
        },
        {
          "type": "heading",
          "level": 2,
          "children": [
            {
              "text": "Resources"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://www.smashingmagazine.com/2018/07/css-grid-2/",
              "children": [
                {
                  "text": "CSS Grid Level 2: Here Comes Subgrid"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://noti.st/rachelandrew/g2qkOz/grids-all-the-way-down#s12eg0L",
              "children": [
                {
                  "text": "Grids All The Way Down"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://www.w3.org/TR/css-grid-2/",
              "children": [
                {
                  "text": "CSS Grid Layout Module Level 2"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "🔗 "
            },
            {
              "type": "link",
              "href": "https://dev.to/kenbellows/why-we-need-css-subgrid-53mh",
              "children": [
                {
                  "text": "Why we need CSS subgrid"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "divider",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "I am eagerly waiting for browsers to support subgrid "
            },
            {
              "text": "(hopefully soon)",
              "italic": true
            },
            {
              "text": " so I can play around with it and figure out interesting use cases."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Feedbacks? Leave a comment :)"
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to add task list or checkbox list in markdown",
    "slug": "add-list-in-markdown",
    "status": "published",
    "publishDate": "2021-11-30T13:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Task lists allow you to create a list of items with checkboxes. In Markdown applications that support task lists, checkboxes will be displayed next to the content. "
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "To create a task list, add dashes (-) and brackets with a space () in front of task list items. To select a checkbox, add an x in between the brackets ()."
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Resources",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            },
            {
              "type": "link",
              "href": "https://www.markdownguide.org/extended-syntax/#:~:text=In%20Markdown%20applications%20that%20support,brackets%20(%20%5Bx%5D%20)",
              "children": [
                {
                  "text": "https://www.markdownguide.org/extended-syntax/#:~:text=In Markdown applications that support,brackets ( )"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to use array split with regex in JS",
    "slug": "array-split-regex.",
    "status": "published",
    "publishDate": "2022-08-31T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const list = \"a a a  b  c c  d d d d  e e e e e\";\nconst words = list.split(/\\s{1,}/);\n\nconsole.log(words);\n\n// [\"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"d\", \"d\", \"d\", \"d\", \"e\", \"e\", \"e\", \"e\", \"e\"]"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Resources",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            },
            {
              "type": "link",
              "href": "https://www.tracedynamics.com/javascript-split-string-method/",
              "children": [
                {
                  "text": "https://www.tracedynamics.com/javascript-split-string-method/"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to find out if the browser tab of the page is focused?",
    "slug": "browser-tab-focussed",
    "status": "draft",
    "publishDate": "2022-09-09T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const isBrowserTabFocused = () => !document.hidden;\n\n// Example\nisBrowserTabFocused(); // true"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to camelize a hyphen-delimited string in JS",
    "slug": "camelize-hyphen-delimited-string",
    "status": "draft",
    "publishDate": "2022-09-09T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": "We need to write a function that uniformly converts "
            },
            {
              "text": "hello-world",
              "bold": true
            },
            {
              "text": " to "
            },
            {
              "text": "helloWorld",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "const camelizeRE = /-(\\w)/g;\n\nconst camelize = cached((str) => {\n  return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : \"\"));\n});\n\ncamelize(\"hello-world\");\n// \"helloWorld\""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to capitalize a string in JS",
    "slug": "capitalize-string",
    "status": "published",
    "publishDate": "2022-09-09T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "First Way:\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nSecond Way (Regex):\n\n^ ==> 'Start of the string'\nlet str = 'the quick green alligator...';\nlet regex = /\\w\\S*/g;\n// Breaking down regex\n\n\\w ==> 'Character'\n\\S ==> 'Non-whitespace character'\n* ==> zero or many occurences\nstr.match(regex)    // [\"the\", \"quick\", \"green\", \"alligator...\"]\n\nstr.replace(/\\w\\S*/g, (w) => (w.replace(/^\\w/, (c) => c.toUpperCase())))"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "blockquote",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Replace function can accept the second parameter as a function/replacer"
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Resources",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            },
            {
              "type": "link",
              "href": "https://www.digitalocean.com/community/tutorials/js-capitalizing-strings",
              "children": [
                {
                  "text": "https://www.digitalocean.com/community/tutorials/js-capitalizing-strings"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            },
            {
              "type": "link",
              "href": "https://www.javascripttutorial.net/javascript-string-replace/",
              "children": [
                {
                  "text": "https://www.javascripttutorial.net/javascript-string-replace/"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to convert a map into an array in JS",
    "slug": "convert-map-into-array",
    "status": "published",
    "publishDate": "2022-09-09T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const map = {\"a\" => 3, \"b\" => 1, \"c\" => 2, \"d\" => 4, \"e\" => 5};\n\nconst arr = Array.from(map);\n\nconsole.log(arr)\n\n// [[\"a\", 3], [\"b\", 1], [\"c\", 2], [\"d\", 4], [\"e\", 5]]"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to convert PascalCase/CamelCase to underscore_case in JS?",
    "slug": "convert-pascal-camelcase",
    "status": "published",
    "publishDate": "2022-09-09T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "str\n  .replace(/(?:^|\\.?)([A-Z0-9])/g, function (x, y) {\n    return \"*\" + y.toLowerCase();\n  })\n  .replace(/^*/, \"\");"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to convert a value into String in JS?",
    "slug": "convert-value-to-string",
    "status": "published",
    "publishDate": "2022-09-09T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "author": {
      "connect": {
        "email": "ruphaaganesh@gmail.com"
      }
    },
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            },
            {
              "type": "link",
              "href": "https://github.com/ruphaa/how-to-notes-blog/blob/master/images/uploads/String.png",
              "children": [
                {
                  "text": "https://github.com/ruphaa/how-to-notes-blog/blob/master/images/uploads/String.png"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "As you can see, there are completely different mechanisms for trying to convert a value into a string. So how do we choose?"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "when we want to convert "
                    },
                    {
                      "text": "null",
                      "code": true
                    },
                    {
                      "text": " and "
                    },
                    {
                      "text": "undefined",
                      "code": true
                    },
                    {
                      "text": " to a string, we often want it to return an empty string."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "when we turn an array and a plain object into a string, we often want to use "
                    },
                    {
                      "text": "JSON.stringify",
                      "code": true
                    },
                    {
                      "text": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "If the object’s "
                    },
                    {
                      "text": "toString",
                      "code": true
                    },
                    {
                      "text": " method is overridden, then we want to use "
                    },
                    {
                      "text": "String()",
                      "code": true
                    },
                    {
                      "text": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "In other cases, "
                    },
                    {
                      "text": "String()",
                      "code": true
                    },
                    {
                      "text": " is used to convert the value to a String."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "function isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Object]\";\n}\n\nfunction toString(val) {\n  if (val === null || val === undefined) return \"\";\n  if (Array.isArray(val)) return JSON.stringify(val);\n  if (isPlainObject(val) && val.toString === Object.prototype.toString)\n    return JSON.stringify(val); // other cases\n  return String(val);\n}"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Also to join the elements in an array, instead of using "
            },
            {
              "text": "join(',')",
              "code": true
            },
            {
              "text": " we can use "
            },
            {
              "text": "String([1,2,3])",
              "code": true
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to copy a string to the clipboard?",
    "slug": "copy-string-clipboard",
    "status": "published",
    "publishDate": "2022-08-31T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const copyToClipboard = (str) => {\n  const el = document.createElement(\"textarea\");\n  el.value = str;\n  el.setAttribute(\"readonly\", \"\");\n  el.style.position = \"absolute\";\n  el.style.left = \"-9999px\";\n  document.body.appendChild(el);\n  const selected =\n    document.getSelection().rangeCount > 0\n      ? document.getSelection().getRangeAt(0)\n      : false;\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n  if (selected) {\n    document.getSelection().removeAllRanges();\n    document.getSelection().addRange(selected);\n  }\n};\n\n// Example\ncopyToClipboard(\"Lorem ipsum\"); // 'Lorem ipsum' copied to clipboard."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to create a counter with the specified range, step and duration for the specified selector?",
    "slug": "create-a-counter",
    "status": "published",
    "publishDate": "2022-08-31T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const counter = (selector, start, end, step = 1, duration = 2000) => {\n  let current = start,\n    _step = (end - start) * step < 0 ? -step : step,\n    timer = setInterval(() => {\n      current += _step;\n      document.querySelector(selector).innerHTML = current;\n      if (current >= end) document.querySelector(selector).innerHTML = end;\n      if (current >= end) clearInterval(timer);\n    }, Math.abs(Math.floor(duration / (end - start))));\n  return timer;\n};\n\n// Example\ncounter(\"#my-id\", 1, 1000, 5, 2000); // Creates a 2-second timer for the element with id=\"my-id\""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to create a directory, if it does not exist?",
    "slug": "create-a-directory",
    "status": "published",
    "publishDate": "2022-09-09T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const fs = require(\"fs\");\nconst createDirIfNotExists = (dir) =>\n  !fs.existsSync(dir) ? fs.mkdirSync(dir) : undefined;\n\n// Example\ncreateDirIfNotExists(\"test\"); // creates the directory 'test', if it doesn't exist"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to create an object containing the parameters of the current URL?",
    "slug": "create-an-object-url",
    "status": "published",
    "publishDate": "2022-09-09T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const getURLParameters = (url) =>\n  (url.match(/([^?=&]+)(=([^&]*))/g) || []).reduce(\n    (a, v) => (\n      (a[v.slice(0, v.indexOf(\"=\"))] = v.slice(v.indexOf(\"=\") + 1)), a\n    ),\n    {}\n  );\n\n// Examples\ngetURLParameters(\"http://url.com/page?n=Adam&s=Smith\"); // {n: 'Adam', s: 'Smith'}\ngetURLParameters(\"google.com\"); // {}"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to get the current URL?",
    "slug": "current-url",
    "status": "published",
    "publishDate": "2022-08-31T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const currentURL = () => window.location.href;\n\n// Example\ncurrentURL(); // 'https://google.com'"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to delete a specific item from an array in JS?",
    "slug": "delete-an-item-array",
    "status": "published",
    "publishDate": "2022-08-31T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "First way",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Iterate through the array, and find the item you want to delete and then do "
            },
            {
              "text": "delete list[index]",
              "code": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Initial list length - 5"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "list.forEach((index, item) ⇒ if(item.name == 'No entry') delete list[item])",
              "code": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This will delete the item in the array but it leaves a void meaning - the array length will still remain the same → will be like final list length 5 - [1,2,3,4,empty]"
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Second way",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "list.forEach((index, item) ⇒ if(item.name == 'No entry') list.splice(index, 1))",
              "code": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This will actually the remove the item and it's space from the array so the length of the array will be Initial(5) ⇒ Final(4)"
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to deploy an app using AWS Amplify",
    "slug": "deploy-app-aws-amplify",
    "status": "published",
    "publishDate": "2022-08-31T14:00:00.000Z",
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Steps to push code",
              "bold": true
            }
          ]
        },
        {
          "type": "ordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "creating a new repository by clicking the plus button on the top right of the page."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "choose a repository name and click create repository"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Then, copy the commands from …or push an existing repository from the command line and run them in your terminal."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Run "
                    },
                    {
                      "text": "git add",
                      "code": true
                    },
                    {
                      "text": " . && "
                    },
                    {
                      "text": "git commit -m \"tutorial complete\"",
                      "code": true
                    },
                    {
                      "text": " && "
                    },
                    {
                      "text": "git push",
                      "code": true
                    },
                    {
                      "text": " in your terminal to send your latest changes."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Steps to deploy",
              "bold": true
            }
          ]
        },
        {
          "type": "ordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Create an "
                    },
                    {
                      "type": "link",
                      "href": "https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/",
                      "children": [
                        {
                          "text": "AWS account"
                        }
                      ]
                    },
                    {
                      "text": " if you don't already have one."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Navigate to the "
                    },
                    {
                      "type": "link",
                      "href": "https://console.aws.amazon.com/amplify/home",
                      "children": [
                        {
                          "text": "Amplify Console"
                        }
                      ]
                    },
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Click on the orange "
                    },
                    {
                      "text": "connect app",
                      "code": true
                    },
                    {
                      "text": " button."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Choose GitHub in the From your existing code menu, and click continue"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Type in the name of your GitHub repo you just created (it should autofill!) and then click next"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "The build settings will auto-populate, and so you can just click next on the Configure build settings"
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "Click Save and deploy."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to detect click outside a container in jQuery?",
    "slug": "detect-clicks-outside",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "$(document).on(\"click\", function (event) {\n  if (!$(event.target).closest(\".dropdown\").length) {\n    $(\".dropdown-menu\").slideUp(\"fast\");\n    // Showing the hint message\n    $(\".hint\").html(\"A click <b>outside</b> the dropdown is detected.\");\n  }\n});"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to get the difference (in days) between two dates?",
    "slug": "difference-dates",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const getDaysDiffBetweenDates = (dateInitial, dateFinal) =>\n  (dateFinal - dateInitial) / (1000 * 3600 * 24);\n\n// Example\ngetDaysDiffBetweenDates(new Date(\"2017-12-13\"), new Date(\"2017-12-22\")); // 9"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to display hidden files in MAC",
    "slug": "display-hidden-files",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "In terminal, type \"defaults write com.apple.finder AppleShowAllFiles TRUE/Yes”\nHold option/alt , right click on finder in the dock and click relaunch.\n\ndefaults write com.apple.finder AppleShowAllFiles FALSE\n\nTo show the lib folder inside users folder - chflags nohidden ~/Library/"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to make a dom element editable?",
    "slug": "dom-element-editable",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": "In HTML:"
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "html"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "<div class=\"card\" id=\"card\">\n  <span contenteditable=\"true\">Happy Birthday Girl!</span>\n</div>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "In Javascript"
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "document.getElementById(\"myP\").contentEditable = \"true\";"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to dynamically set a key in an object",
    "slug": "dynamically-set-key-object.",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const dynamic = \"model\";\n\nconst item = {\n  brand: \"Porsche\",\n  [dynamic]: \"Panamera\",\n};\n\nconsole.log(item); // {brand: \"Porsche\", model: \"Panamera\"}"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to check if the element has the specified class?",
    "slug": "element-has-specified-class",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "hasClass(document.querySelector(\"p.special\"), \"special\");\n\nconst hasClass = (el, className) => el.classList.contains(className);"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to encode a set of form elements as an object?",
    "slug": "encode-form-elements",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const formToObject = (form) =>\n  Array.from(new FormData(form)).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: value,\n    }),\n    {}\n  );\n\n// Example\nformToObject(document.querySelector(\"#form\")); // { email: 'test@email.com', name: 'Test Name' }"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to export multiple functions using export default in JS?",
    "slug": "export-multiple-functions",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const printFancyNumber = function () {\n  console.log(\"I print fancy number\");\n};\n\nconst displayFancyMessage = function () {\n  console.log(\"I print fancy message too\");\n};\n\nexport default {\n  printFancyNumber,\n  displayFancyMessage,\n};"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to fetch all images within an element?",
    "slug": "fetch-all-images",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const getImages = (el, includeDuplicates = false) => {\n  const images = [...el.getElementsByTagName(\"img\")].map((img) =>\n    img.getAttribute(\"src\")\n  );\n  return includeDuplicates ? images : [...new Set(images)];\n};\n\n// Examples\ngetImages(document, true); // ['image1.jpg', 'image2.png', 'image1.png', '...']\ngetImages(document, false); // ['image1.jpg', 'image2.png', '...']"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to flatten an array in JS?",
    "slug": "flatten-array",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const arr = [\n  [1, 2, 3],\n  [4, 5],\n];\n\n// First way\n\nconsole.log(arr.flat()); // [1,2,3,4,5]\n\n// Array.flat - can take numeric arguments which denotes the number of levels to be considered for flattening\n// Array.flat(Infinity) - flats the array till the very last element(depth)\n\n// Second way\n\nvar flattenedArray = Array.prototype.concat.apply([], arr);\n\nconsole.log(flattenedArray); // [1,2,3,4,5]\n\n// This flattens only 1 level deep"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to get the last word in a string in JS?",
    "slug": "get-last-word",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "var word = str.split(\"-\").pop();\n\nOR;\n\nvar last = str.substring(str.lastIndexOf(\"-\") + 1);\n\nOR;\n\nvar data = \"Welcome to Stack Overflow\";\nconsole.log(data.split(\" \").splice(-1));"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to get non-tag characters from an HTML formatted string in JS",
    "slug": "get-non-tag-characters",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "var html1 = '<span class=\"red\">hello world</span> <span>hello friend</span>';\n\nvar html2 =\n`<ul>\n  <li>Hello Medium!</li>\n  <li>Hello Friends!</li>\n  <li>Lorem, ipsum dolor.</li>\n</ul>`;\n\n**Expected Result:**\n\n'hello world hello friend'\n\n`  Hello Medium!\n  Hello Friends!\n  Lorem, ipsum dolor.`\n\nfunction decoder(html){\n  let decoder = document.createElement('div')\n  decoder.innerHTML = html\n  console.log(decoder.textContent)\n  // return decoder.textContent\n}"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to host static site in MAC?",
    "slug": "host-site-mac",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "OS X: You need only one tiny command to start a web server from any directory through OS X's terminal. \nIf you've got a web site lying around and need to test it out, this is possibly the fastest way to make that happen.\nJust navigate to the directory you want to use and enter the following command:\npython -m SimpleHTTPServer 8000\nYou may want to change the port if you already have something running on 8000, but other than that the command doesn't require much alteration. \nIt's a great little snippet to keep in mind (or in your TextExpander shortcuts) for the next time you need a quick little web server."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to host a static website using ngrok?",
    "slug": "host-site-ngrok",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "NGrok\n\nngrok http 8080 -host-header=\"localhost:8080”\n\nngrok http -host-header=site1.dev 80\n\nngrok http 3000"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to identify a plain object from other special objects like Array, String and RegEx in JS?",
    "slug": "identify-plain-object",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "function isPlainObject (obj){\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nBecause:\n\n_toString.call([1,2,3]) - [object Array]\n_toString.call(new String('Boss')) - [object String]\n_toString.call(/hello world/) - [object RegExp]"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to identify different runtime and browsers in JS?",
    "slug": "identify-runtime",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Browser environment sniffing",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "const inBrowser = typeof window !== \"undefined\";"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Identify UserAgent of the Browser",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "const UA = inBrowser && window.navigator.userAgent.toLowerCase();"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Determining the current browser vendor",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "const isIE = UA && /msie|trident/.test(UA);\nconst isIE9 = UA && UA.indexOf(\"msie 9.0\") > 0;\nconst isEdge = UA && UA.indexOf(\"edge/\") > 0;\nconst isAndroid = UA && UA.indexOf(\"android\") > 0;\nconst isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nconst isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nconst isPhantomJS = UA && /phantomjs/.test(UA);\nconst isFF = UA && UA.match(/firefox\\/(\\d+)/);"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to import/export in JS using module exports and require?",
    "slug": "import-export-modules",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "// calculator.js\nconst add = function (a, b) {\n  return a + b;\n};\n\nmodule.exports = add;\n\n//index.js\n\nconst add = require(\"./\");\n\nconsole.log(add(2, 3));"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Resources",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            },
            {
              "type": "link",
              "href": "https://alligator.io/js/modules-es6/",
              "children": [
                {
                  "text": "https://alligator.io/js/modules-es6/"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to import and export functions in JS?",
    "slug": "import-export",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n[OR];\nconst add = function (a, b) {\n  return a + b;\n};\nconst sub = function (a, b) {\n  return a - b;\n};\n\nexport { add, sub };\n\n//index.js\n\nimport { add, sub } from \"./calculator.js\";\n\nconsole.log(add(2, 3));\nconsole.log(sub(6, 3));"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to initialize react in the current directory?",
    "slug": "initialize-react",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "Creating a text project in the current directory you're in is as simple as running the below command.\n\nnpx create-react-app .\n\nOr this when you have create react app installed globally.\n\ncreate-react-app ."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to invoke the provided function after wait (in milliseconds)?",
    "slug": "invoke-provided-function",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const delay = (fn, wait, ...args) => setTimeout(fn, wait, ...args);\ndelay(\n  function (text) {\n    console.log(text);\n  },\n  1000,\n  \"later\"\n);\n\n// Logs 'later' after one second."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to make a GET request to the passed URL?",
    "slug": "make-get-request",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const httpGet = (url, callback, err = console.error) => {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", url, true);\n  request.onload = () => callback(request.responseText);\n  request.onerror = () => err(request);\n  request.send();\n};\n\nhttpGet(\"https://jsonplaceholder.typicode.com/posts/1\", console.log);\n\n// Logs: {\"userId\": 1, \"id\": 1, \"title\": \"sample title\", \"body\": \"my text\"}"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to make a POST request to the passed URL?",
    "slug": "make-post-request",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const httpPost = (url, data, callback, err = console.error) => {\n  const request = new XMLHttpRequest();\n  request.open(\"POST\", url, true);\n  request.setRequestHeader(\"Content-type\", \"application/json; charset=utf-8\");\n  request.onload = () => callback(request.responseText);\n  request.onerror = () => err(request);\n  request.send(data);\n};\n\nconst newPost = {\n  userId: 1,\n  id: 1337,\n  title: \"Foo\",\n  body: \"bar bar bar\",\n};\nconst data = JSON.stringify(newPost);\nhttpPost(\"https://jsonplaceholder.typicode.com/posts\", data, console.log);\n\n// Logs: {\"userId\": 1, \"id\": 1337, \"title\": \"Foo\", \"body\": \"bar bar bar\"}"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to match dynamic strings to the regex in JS?",
    "slug": "match-dynamic-strings",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "To dynamically match a word in a given long string, we can use 'RegEx'\n\n// Example\nlet item = \"Burger\"\nlet regex = new RegExp(item, 'ig')       // Output ==>  /Burger/ig\n\"milkshakepizzachickenfriescokeburgerburger\".match(regex)\n\n// Output ==> [\"burger\", \"burger\"]"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to match same consecutive numbers/characters in JS using regex?",
    "slug": "match-same",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "// To match strings only consisting of 1 or more identical digits, you may use\n\nlet regex = /(.)\\1*/g\n\n// Breaking down regex\n\n* ==> Zero or more times(https://www.rexegg.com/regex-quickstart.html)\n\nlet regex2 = /([0-9])\\1{1,}/g\n\n// Breaking down regex2\n\n() ==> Capturing group\n([0-9]) ==> Capturing group 1 matching digit\n\\1 ==> \\1 is a backreference to Group 1 value meaning it's a backref -- (The backreference \\1 (backslash one) references the first capturing group. \\1 matches the exact same text that was matched by the first capturing group)\n1{1,} ==> 1 or more occurences of the value captured in Group 1\n{1,} ==> limiting quantifier"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Resources",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            },
            {
              "type": "link",
              "href": "https://www.regular-expressions.info/backref.html",
              "children": [
                {
                  "text": "https://www.regular-expressions.info/backref.html"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to figure out if the device is a mobile device or a desktop/laptop?",
    "slug": "mobile-or-desktop",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const detectDeviceType = () =>\n  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  )\n    ? \"Mobile\"\n    : \"Desktop\";\n\n// Example\ndetectDeviceType(); // \"Mobile\" or \"Desktop\""
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to pair consecutive digits in JS using regex?",
    "slug": "pair-consecutive-digits",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "'11211'.match(/\\d{2}/g)\n\n// [\"11\", \"21\"]\n\n'11211'.match(/\\d{3}/g)\n\n// [\"112\"]\n It will discard the rest of the numbers because, they don't form a 3 digit set"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to check if the parent element contains the child element?",
    "slug": "parent-contains-child",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "const elementContains = (parent, child) =>\n  parent !== child && parent.contains(child);\n\n// Examples\nelementContains(\n  document.querySelector(\"head\"),\n  document.querySelector(\"title\")\n);\n// true\nelementContains(document.querySelector(\"body\"), document.querySelector(\"body\")); // false"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to pass a custom sort function in js and how does it work?",
    "slug": "pass-custom-sort",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "var numbers = [4, 2, 5, 1, 3];\n\nnumbers.sort(function (a, b) {\n  return a - b;\n});\n\nconsole.log(numbers);\n\n// [1, 2, 3, 4, 5]"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "function compare(a, b) {\n  if (a is less than b by some ordering criterion) {\n    return -1;\n  }\n  if (a is greater than b by the ordering criterion) {\n    return 1;\n  }\n  // a must be equal to b\n  return 0;\n}"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This is how the compare function works",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "If "
            },
            {
              "text": "compareFunction",
              "code": true
            },
            {
              "text": " is supplied, all non-"
            },
            {
              "text": "undefined",
              "code": true
            },
            {
              "text": " array elements are sorted according to the return value of the compare function (all "
            },
            {
              "text": "undefined",
              "code": true
            },
            {
              "text": " elements are sorted to the end of the array, with no call to "
            },
            {
              "text": "compareFunction",
              "code": true
            },
            {
              "text": "). If "
            },
            {
              "text": "a",
              "code": true
            },
            {
              "text": " and "
            },
            {
              "text": "b",
              "code": true
            },
            {
              "text": " are two elements being compared, then:"
            }
          ]
        },
        {
          "type": "unordered-list",
          "children": [
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "If "
                    },
                    {
                      "text": "compareFunction(a, b)",
                      "code": true
                    },
                    {
                      "text": " returns less than 0, sort "
                    },
                    {
                      "text": "a",
                      "code": true
                    },
                    {
                      "text": " to an index lower than "
                    },
                    {
                      "text": "b",
                      "code": true
                    },
                    {
                      "text": " (i.e. "
                    },
                    {
                      "text": "a",
                      "code": true
                    },
                    {
                      "text": " comes first)."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "If "
                    },
                    {
                      "text": "compareFunction(a, b)",
                      "code": true
                    },
                    {
                      "text": " returns 0, leave "
                    },
                    {
                      "text": "a",
                      "code": true
                    },
                    {
                      "text": " and "
                    },
                    {
                      "text": "b",
                      "code": true
                    },
                    {
                      "text": " unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behavior, thus, not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "If "
                    },
                    {
                      "text": "compareFunction(a, b)",
                      "code": true
                    },
                    {
                      "text": " returns greater than 0, sort "
                    },
                    {
                      "text": "b",
                      "code": true
                    },
                    {
                      "text": " to an index lower than "
                    },
                    {
                      "text": "a",
                      "code": true
                    },
                    {
                      "text": " (i.e. "
                    },
                    {
                      "text": "b",
                      "code": true
                    },
                    {
                      "text": " comes first)."
                    }
                  ]
                }
              ]
            },
            {
              "type": "list-item",
              "children": [
                {
                  "type": "list-item-content",
                  "children": [
                    {
                      "text": "compareFunction(a, b)",
                      "code": true
                    },
                    {
                      "text": " must always return the same value when given a specific pair of elements "
                    },
                    {
                      "text": "a",
                      "code": true
                    },
                    {
                      "text": " and "
                    },
                    {
                      "text": "b",
                      "code": true
                    },
                    {
                      "text": " as its two arguments. If inconsistent results are returned, then the sort order is undefined."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "heading",
          "level": 3,
          "children": [
            {
              "text": "Resources",
              "bold": true
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            },
            {
              "type": "link",
              "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
              "children": [
                {
                  "text": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"
                }
              ]
            },
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to push one github repository into another github repository?",
    "slug": "push-repo",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": "This way of pushing one repo into another is called github sub modules"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "syntax: git submodule add <github_url> <folder_name>\neg: git submodule add https://github.com/ruphaa/exercises.git **exercises**"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to get readable format of the given number of milliseconds?",
    "slug": "readable-format",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const formatDuration = (ms) => {\n  if (ms < 0) ms = -ms;\n  const time = {\n    day: Math.floor(ms / 86400000),\n    hour: Math.floor(ms / 3600000) % 24,\n    minute: Math.floor(ms / 60000) % 60,\n    second: Math.floor(ms / 1000) % 60,\n    millisecond: Math.floor(ms) % 1000,\n  };\n  return Object.entries(time)\n    .filter((val) => val[1] !== 0)\n    .map(([key, val]) => `${val} ${key}${val !== 1 ? \"s\" : \"\"}`)\n    .join(\", \");\n};\n\n// Examples\nformatDuration(1001); // '1 second, 1 millisecond'\nformatDuration(34325055574); // '397 days, 6 hours, 44 minutes, 15 seconds, 574 milliseconds'"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to use regex to check for domain in URL?",
    "slug": "regex-check-domain",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "/(?:http(?:s)?:\\/\\/)?(?:w{3}\\.)?([^\\.]+)/I;"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to remove duplicates from an array in JS",
    "slug": "remove-duplicates-array",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Method 1: Using Set"
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "let nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4];\n\nlet uniqueNum = Array.from(new Set([...nums]));"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to remove an event listener from an element?",
    "slug": "remove-event-listener",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const off = (el, evt, fn, opts = false) =>\n  el.removeEventListener(evt, fn, opts);\n\nconst fn = () => console.log(\"!\");\ndocument.body.addEventListener(\"click\", fn);\noff(document.body, \"click\", fn); // no longer logs '!' upon clicking on the page"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to remove items from an array in JS? (All Possible Ways)",
    "slug": "remove-items-array",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Removing Elements from End of a JavaScript Array",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "let arr = [1, 2, 3, 4, 5, 6];\n\narr.pop();"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Removing Elements from Beginning of a JavaScript Array",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "let arr = [1, 2, 3, 4, 5, 6];\n\narr.shift();"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Using Splice to Remove Array Elements in JavaScript",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "let arr = [1, 2, 3, 4, 5, 6];\n\narr.splice(1, 2);\n\nconsole.log(arr); // [1, 4, 5, 6]"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Using the Array filter Method to Remove Items By Value",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n\nvar filtered = array.filter(function (value, index, arr) {\n  return value > 5;\n});"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Explicitly Remove Array Elements Using the Delete Operator",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "var ar = [1, 2, 3, 4, 5, 6];\n\ndelete ar[4];\n\nconsole.log(ar); // [1, 2, 3, 4, undefined, 6]"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "Clear or Reset a JavaScript Array using length",
              "bold": true
            }
          ]
        },
        {
          "type": "code",
          "children": [
            {
              "text": "var ar = [1, 2, 3, 4, 5, 6];\n\nar.length = 0;\n\nconsole.log(ar); // []"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to remove node_modules from repo/ or prevent from getting pushed into github in VSCode",
    "slug": "remove-node-modules",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "make .gitignore file.\n\nadd node_modules/ line to gitignore file\n\n**run this command**\ngit rm -r --cached .\ngit add .\ngit commit -m \"remove gitignore files\"\ngit push"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to remove a specific item from an array by value?",
    "slug": "remove-specific-item-array",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "code",
          "children": [
            {
              "text": "let arr = [2, 5, 9];\n\n// Let's remove the value 5\n\narr.splice(1, 1);\n\nconsole.log(arr); // [2,9];\n\n// Splice is mutable function meaning it alters the given array unlike slice"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to replace occurence of all the underscores in a string in JS",
    "slug": "replace-occurences",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": "string.replace(/[_]/g,'')",
              "code": true
            },
            {
              "text": " - Removes all the occurences of underscore"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": "string.replace('\\_','')",
              "code": true
            },
            {
              "text": " - removes the first occurence of underscore"
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to retrieve a set of properties indicated by the given selectors from an object?",
    "slug": "retrieve-properties",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        },
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const get = (from, ...selectors) =>\n  [...selectors].map((s) =>\n    s\n      .replace(/\\[([^\\[\\]]*)\\]/g, \".$1.\")\n      .split(\".\")\n      .filter((t) => t !== \"\")\n      .reduce((prev, cur) => prev && prev[cur], from)\n  );\nconst obj = {\n  selector: { to: { val: \"val to select\" } },\n  target: [1, 2, { a: \"test\" }],\n};\n\n// Example\nget(obj, \"selector.to.val\", \"target[0]\", \"target[2].a\"); // ['val to select', 1, 'test']"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to get the scroll position of the current page?",
    "slug": "scroll-position",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const getScrollPosition = (el = window) => ({\n  x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,\n  y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop,\n});\n\n// Example\ngetScrollPosition(); // {x: 0, y: 200}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to smooth-scroll to the top of the page?",
    "slug": "smooth-scroll",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const scrollToTop = () => {\n  const c = document.documentElement.scrollTop || document.body.scrollTop;\n  if (c > 0) {\n    window.requestAnimationFrame(scrollToTop);\n    window.scrollTo(0, c - c / 8);\n  }\n};\n\n// Example\nscrollToTop();"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to swap variables using array destructuring in JS",
    "slug": "swap-variables",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "let x = 2;\nlet y = 3;\n[x, y] = [y, x];\n\nconsole.log(x); // 3\nconsole.log(y); // 2"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to toggle a class for an element?",
    "slug": "toggle-class",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const toggleClass = (el, className) => el.classList.toggle(className);\n\n// Example\ntoggleClass(document.querySelector(\"p.special\"), \"special\");\n// The paragraph will not have the 'special' class anymore"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to trigger a specific event on a given element, optionally passing custom data?",
    "slug": "trigger-specific-event",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const triggerEvent = (el, eventType, detail) =>\n  el.dispatchEvent(new CustomEvent(eventType, { detail }));\n\n// Examples\ntriggerEvent(document.getElementById(\"myId\"), \"click\");\ntriggerEvent(document.getElementById(\"myId\"), \"click\", { username: \"bob\" });"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to use regex to validate if the string contains only numbers, alphabets, space and underscore",
    "slug": "validate-regex",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "let regex = /^[a-zA-Z0-9_\\s]*$/g;"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  },
  {
    "title": "How to check if the element specified is visible in the viewport?",
    "slug": "visible-in-viewport",
    "status": "published",
    "publishDate": null,
    "metaDescription": "",
    "metaImageUrl": "",
    "metaImageAltText": "",
    "content": {
      "document": [
        {
          "type": "component-block",
          "component": "code",
          "props": {
            "content": null,
            "language": "js"
          },
          "children": [
            {
              "type": "component-block-prop",
              "propPath": [
                "content"
              ],
              "children": [
                {
                  "type": "code",
                  "children": [
                    {
                      "text": "const elementIsVisibleInViewport = (el, partiallyVisible = false) => {\n  const { top, left, bottom, right } = el.getBoundingClientRect();\n  const { innerHeight, innerWidth } = window;\n  return partiallyVisible\n    ? ((top > 0 && top < innerHeight) ||\n        (bottom > 0 && bottom < innerHeight)) &&\n        ((left > 0 && left < innerWidth) || (right > 0 && right < innerWidth))\n    : top >= 0 && left >= 0 && bottom <= innerHeight && right <= innerWidth;\n};\n\n// Examples\nelementIsVisibleInViewport(el); // (not fully visible)\nelementIsVisibleInViewport(el, true); // (partially visible)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "text": ""
            }
          ]
        }
      ]
    }
  }
]